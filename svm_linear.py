{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "[[88  0  0  0  0  0  0  0  1  0]\n",
      " [ 0 65  2  0  9  2  0  1  2  5]\n",
      " [ 0  1 85  1  0  2  0  1  1  0]\n",
      " [ 0  3  4 75  0  1  0  2  5 10]\n",
      " [ 0  6  0  0 73 12  0  1  6  0]\n",
      " [ 0  1  0  0  0 81  0  0  0  5]\n",
      " [ 0  2  0  1  1  0 92  0  0  0]\n",
      " [ 0  3  2  0  0  0  0 81  2  1]\n",
      " [ 3  8  3  1  7  3  0  1 54  6]\n",
      " [ 2  0  0  4  0  3  0  0  7 61]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.99      0.97        89\n",
      "           1       0.73      0.76      0.74        86\n",
      "           2       0.89      0.93      0.91        91\n",
      "           3       0.91      0.75      0.82       100\n",
      "           4       0.81      0.74      0.78        98\n",
      "           5       0.78      0.93      0.85        87\n",
      "           6       1.00      0.96      0.98        96\n",
      "           7       0.93      0.91      0.92        89\n",
      "           8       0.69      0.63      0.66        86\n",
      "           9       0.69      0.79      0.74        77\n",
      "\n",
      "    accuracy                           0.84       899\n",
      "   macro avg       0.84      0.84      0.84       899\n",
      "weighted avg       0.84      0.84      0.84       899\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import sklearn.datasets as skdata\n",
    "import numpy as np\n",
    "import sklearn.metrics\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "\n",
    "def prepare_data(num):\n",
    "    # lee los numeros\n",
    "    numeros = skdata.load_digits()\n",
    "\n",
    "    # lee los labels\n",
    "    target = numeros['target']\n",
    "\n",
    "    # lee las imagenes\n",
    "    imagenes = numeros['images']\n",
    "    \n",
    "    #imagenes = imagenes[]\n",
    "    \n",
    "    #Separa los datos para SVM 80 - validaci√≥n 20\n",
    "    \n",
    "    \n",
    "    # cuenta el numero de imagenes total\n",
    "    n_imagenes = len(target)\n",
    "\n",
    "    # para poder correr PCA debemos \"aplanar las imagenes\"\n",
    "    data = imagenes.reshape((n_imagenes, -1)) # para volver a tener los datos como imagen basta hacer data.reshape((n_imagenes, 8, 8))\n",
    "\n",
    "    # Split en train/test\n",
    "    x_train, x_test, y_train, y_test = train_test_split(data, target, train_size=0.5)\n",
    "    # todo lo que es diferente de 1 queda marcado como 0\n",
    "    \n",
    "    # Reescalado de los datos\n",
    "    scaler = StandardScaler()\n",
    "    x_train = scaler.fit_transform(x_train)\n",
    "    x_test = scaler.transform(x_test)\n",
    "    return {'x_train':x_train, 'x_test':x_test, 'y_train':y_train, 'y_test':y_test}\n",
    "\n",
    "def transform_pca(data, numeros=[1], n_componentes=10, model_name='base'):\n",
    "    # numeros utilizados para generar el espacio de PCA\n",
    "    dd = data['y_train']!=data['y_train']\n",
    "    for n in numeros:\n",
    "        print(n)\n",
    "        dd |= data['y_train']==n\n",
    "        \n",
    "    cov = np.cov(data['x_train'][dd].T)\n",
    "    valores, vectores = np.linalg.eig(cov)\n",
    "\n",
    "    # pueden ser complejos por baja precision numerica, asi que los paso a reales\n",
    "    valores = np.real(valores)\n",
    "    vectores = np.real(vectores)\n",
    "\n",
    "    # reordeno de mayor a menor\n",
    "    ii = np.argsort(-valores)\n",
    "    valores = valores[ii]\n",
    "    vectores = vectores[:,ii]\n",
    "\n",
    "    # encuentro las imagenes en el espacio de los autovectores\n",
    "    \n",
    "    test_trans = data['x_test'] @ vectores\n",
    "    data['x_test_transform_'+model_name] = test_trans[:,:n_componentes]\n",
    "    train_trans = data['x_train'] @ vectores\n",
    "    data['x_train_transform_'+model_name] = train_trans[:,:n_componentes] \n",
    "    return data\n",
    "\n",
    "datost= transform_pca(prepare_data(5))\n",
    "xtrain=datost['x_train_transform_base']\n",
    "xtest=datost['x_test_transform_base']\n",
    "ytrain=datost['y_train']\n",
    "ytest=datost['y_test']\n",
    "svclassifier = SVC(kernel='linear')\n",
    "svclassifier.fit(xtrain, ytrain)\n",
    "ypred = svclassifier.predict(xtest)\n",
    "print(confusion_matrix(ytest,ypred)/())\n",
    "print(classification_report(ytest,ypred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
